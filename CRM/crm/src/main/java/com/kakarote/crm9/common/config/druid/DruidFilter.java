package com.kakarote.crm9.common.config.druid;

import cn.hutool.core.util.StrUtil;
import com.alibaba.druid.filter.FilterChain;
import com.alibaba.druid.filter.FilterEventAdapter;
import com.alibaba.druid.proxy.jdbc.*;
import com.alibaba.druid.sql.SQLUtils;
import com.alibaba.druid.sql.ast.SQLExpr;
import com.alibaba.druid.sql.ast.SQLLimit;
import com.alibaba.druid.sql.ast.SQLOrderBy;
import com.alibaba.druid.sql.ast.SQLStatement;
import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;
import com.alibaba.druid.sql.ast.expr.SQLCastExpr;
import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;
import com.alibaba.druid.sql.ast.statement.*;
import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlDeleteStatement;
import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlSelectQueryBlock;
import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlUnionQuery;
import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlUpdateStatement;
import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;
import com.jfinal.log.Log;
import com.kakarote.crm9.utils.BaseUtil;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("all")
public class DruidFilter extends FilterEventAdapter {

    private static final String BLANK_STRING = " ";

    private static final String SQL_FIELD_WHERE = "WHERE";

    private static final String TABLE_FIELD_C_UID = "c_uid";

    private static final String SQL_FIELD_AND = " AND ";

    private static final String SQL_FIELD_EQUAL = " = ";

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql) throws SQLException {
        if(sql.contains("72crm_admin_hosts")||sql.contains("72crm_admin_menu")||sql.contains("72crm_crm_area")){
            return super.connection_prepareStatement(chain, connection, sql);
        }
        Log.getLog(getClass()).info("orginal sql = "+sql);
        try {
            MySqlStatementParser parser = new MySqlStatementParser(sql);
            SQLStatement stmt = parser.parseStatement();
            if (stmt instanceof SQLSelectStatement) {
                sql = doSelectSql(SQLUtils.toMySqlExpr(sql));
            } else if (stmt instanceof MySqlUpdateStatement) {
                MySqlUpdateStatement update = (MySqlUpdateStatement)stmt;
                sql = doUpdateSql(sql, update);
            } else if (stmt instanceof MySqlDeleteStatement) {
                MySqlDeleteStatement delete = (MySqlDeleteStatement)stmt;
                sql = doDeleteSql(sql, delete);
            }
        } catch (Exception e) {
            Log.getLog(getClass()).error(e.getMessage());
        }
        Log.getLog(getClass()).info("new sql = "+ sql);
        return super.connection_prepareStatement(chain, connection, sql);
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql, int autoGeneratedKeys) throws SQLException {
        if(sql.contains("72crm_admin_hosts")||sql.contains("72crm_admin_menu")||sql.contains("72crm_crm_area")){
            return super.connection_prepareStatement(chain, connection, sql,autoGeneratedKeys);
        }
        Log.getLog(getClass()).info("orginal sql = "+sql);
        try {
            MySqlStatementParser parser = new MySqlStatementParser(sql);
            SQLStatement stmt = parser.parseStatement();
            if (stmt instanceof SQLSelectStatement) {
                sql = doSelectSql(SQLUtils.toMySqlExpr(sql));
            } else if (stmt instanceof MySqlUpdateStatement) {
                MySqlUpdateStatement update = (MySqlUpdateStatement)stmt;
                sql = doUpdateSql(sql, update);
            } else if (stmt instanceof MySqlDeleteStatement) {
                MySqlDeleteStatement delete = (MySqlDeleteStatement)stmt;
               sql = doDeleteSql(sql, delete);
            }
        } catch (Exception e) {
            Log.getLog(getClass()).error(e.getMessage());
        }
        Log.getLog(getClass()).info("new sql = "+ sql);
        return super.connection_prepareStatement(chain, connection, sql,autoGeneratedKeys);
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return super.connection_prepareStatement(chain, connection, sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return super.connection_prepareStatement(chain, connection, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql, int[] columnIndexes) throws SQLException {
        return super.connection_prepareStatement(chain, connection, sql, columnIndexes);
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql, String[] columnNames) throws SQLException {
        return super.connection_prepareStatement(chain, connection, sql, columnNames);
    }

    /**
     * 处理delete语句
     *
     * @param sql
     *     sql语句
     * @param stmt
     *     解析的语句
     * @return 修改的后的sql
     */
    private String doDeleteSql(String sql, SQLStatement stmt) {
        MySqlDeleteStatement delete = (MySqlDeleteStatement)stmt;
        SQLExpr where = delete.getWhere();
        StringBuffer buffer = new StringBuffer();
        // 如果包括where条件 则取where之前sql字符串
        if (where != null) {
            int index = sql.toUpperCase().indexOf(SQL_FIELD_WHERE);
            buffer.append(sql.substring(0, index));
        } else {
            // 取全部sql
            buffer.append(sql);
        }
        // 拼接where条件
        buffer.append(BLANK_STRING).append(appendWhere(where, null));
        return buffer.toString();
    }

    /**
     * 处理更新语句
     *
     * @param sql
     *     sql语句
     * @param stmt
     *     解析的语句
     * @return 修改的后的sql
     */
    private String doUpdateSql(String sql, SQLStatement stmt) {
        MySqlUpdateStatement update = (MySqlUpdateStatement)stmt;
        SQLExpr where = update.getWhere();
        StringBuffer buffer = new StringBuffer();
        // 如果包括where条件 则去where之前sql字符串
        if (where != null) {
            int index = sql.toUpperCase().indexOf(SQL_FIELD_WHERE);
            buffer.append(sql.substring(0, index));
        } else {
            // 取全部sql
            buffer.append(sql);
        }
        // 拼接where条件
        buffer.append(BLANK_STRING).append(appendWhere(where, null));
        return buffer.toString();
    }

    private String doSelectSql(SQLExpr exp) {
        if (exp instanceof SQLQueryExpr) {
            if((((SQLQueryExpr)exp).getSubQuery().getQuery()) instanceof MySqlUnionQuery){
                return SQLUtils.toMySqlString((((SQLQueryExpr)exp).getSubQuery().getQuery()));
            }
            // 将sql转换为select对象
            MySqlSelectQueryBlock select = (MySqlSelectQueryBlock)(((SQLQueryExpr)exp).getSubQuery().getQuery());
            // 获取where对象
            SQLExpr where = select.getWhere();
            SQLSelectGroupByClause groupBy = select.getGroupBy();
            SQLOrderBy orderBy = select.getOrderBy();
            List<SQLSelectItem> selectList = select.getSelectList();
            List<String> selectFieldStringList = new ArrayList<>();
            // 遍历查询的字段，如果查询字段中有子查询
            selectList.forEach(e -> {
                getSubQuery(e);
                selectFieldStringList.add(SQLUtils.toMySqlString(e));
            });
            String selectFieldString = String.join(", ", selectFieldStringList);
            // 获取所查询的表
            SQLTableSource from = select.getFrom();
            StringBuffer newSql = new StringBuffer();
            newSql.append("select").append(BLANK_STRING).append(selectFieldString).append(BLANK_STRING).append("from")
                    .append(BLANK_STRING);
            // 判断是否有子查询
            if (from instanceof SQLSubqueryTableSource) {
                newSql.append("(");
                String alias=from.getAlias();
                from.setAlias(null);
                String fromString = SQLUtils.toMySqlString(from);
                //fromString = fromString.replace("(", "").replace(")", "");
                String subQuery = doSelectSql(SQLUtils.toMySqlExpr(fromString));
                newSql.append(subQuery).append(")");
                if(StrUtil.isNotEmpty(alias)){
                    newSql .append(" as ").append(alias);
                }
                newSql.append(BLANK_STRING).append(appendWhere(where,groupBy));
                return newSql.toString();
            }
            // 获取表名
            String tableName = SQLUtils.toMySqlString(from);
            newSql.append(tableName);
            if(StrUtil.isNotEmpty(from.getAlias())){
                if(!tableName.contains(" ")){
                    newSql .append(" as ").append(from.getAlias());
                }
            }
            String alias=getTableAlias(from);
            newSql.append(BLANK_STRING);
            newSql.append(appendWhere(where,groupBy,alias));
            if(select.getOrderBy()!=null){
                SQLOrderBy sqlOrderBy=select.getOrderBy();
                List<SQLSelectOrderByItem> arrayList=sqlOrderBy.getItems();
                if(arrayList.size()>0){
                    newSql.append(" order by ");
                }
                arrayList.forEach(item->{
                    newSql.append(item.getExpr());
                    if(item.getType()!=null){
                        newSql.append(" ").append(item.getType()).append(" ");
                    }
                });
            }
            if(select.getLimit()!=null){
                SQLLimit sqlLimit=select.getLimit();
                newSql.append(" limit ").append(sqlLimit.getOffset()!=null?sqlLimit.getOffset():0).append(",").append(sqlLimit.getRowCount());
            }
            return newSql.toString();
        }
        return SQLUtils.toMySqlString(exp);
    }

    /**
     * 添加where条件
     *
     * @param where
     *     where语句
     * @param groupBy
     * @return 修改后的where条件
     */
    private String appendWhere(SQLExpr where, SQLSelectGroupByClause groupBy) {
        return appendWhere(where,groupBy,null);
    }
    private String appendWhere(SQLExpr where,SQLSelectGroupByClause groupBy,String alias) {
        StringBuffer whereString = new StringBuffer();
        whereString.append(SQL_FIELD_WHERE).append(BLANK_STRING);
        if (where != null) {
            whereString.append(BLANK_STRING);
            if(alias!=null){
                whereString.append(alias).append(".").append(TABLE_FIELD_C_UID);
            }else {
                whereString .append(TABLE_FIELD_C_UID);
            }
            whereString.append(SQL_FIELD_EQUAL)
                    .append(BaseUtil.getCompanyId()).append(SQL_FIELD_AND).append("(").append(SQLUtils.toMySqlString(where))
                    .append(")");
        } else {
            if(alias!=null){
                whereString.append(alias).append(".").append(TABLE_FIELD_C_UID);
            }else {
                whereString .append(TABLE_FIELD_C_UID);
            }
            whereString.append(SQL_FIELD_EQUAL).append(BaseUtil.getCompanyId());
        }
        if(groupBy != null){
            whereString.append(BLANK_STRING).append(SQLUtils.toMySqlString(groupBy));
        }
        return whereString.toString();
    }
    private String getTableAlias(SQLTableSource from){
        if(from instanceof SQLJoinTableSource){
            return getTableAlias(((SQLJoinTableSource)from).getLeft());
        }else {
            return from.getAlias();
        }
    }
    private void getSubQuery(SQLSelectItem sqlSelectItem){
        if (sqlSelectItem.getExpr() instanceof SQLQueryExpr) {
            String newFieldSql = doSelectSql(sqlSelectItem.getExpr());
            SQLExpr subSelect = SQLUtils.toMySqlExpr(newFieldSql);
            sqlSelectItem.setExpr(subSelect);
        }else if(sqlSelectItem.getExpr() instanceof SQLBinaryOpExpr){
            this.checkBinaryOpExpr((SQLBinaryOpExpr) sqlSelectItem.getExpr());
        }
    }

    private void checkBinaryOpExpr(SQLBinaryOpExpr sqlBinaryOpExpr){
        if(sqlBinaryOpExpr.getLeft()!=null){
            if(sqlBinaryOpExpr.getLeft() instanceof  SQLBinaryOpExpr){
                checkBinaryOpExpr((SQLBinaryOpExpr) sqlBinaryOpExpr.getLeft());
            }else if(sqlBinaryOpExpr.getLeft() instanceof SQLCastExpr){
                checkCaseExpr((SQLCastExpr) sqlBinaryOpExpr.getLeft());
            }
        }
        if(sqlBinaryOpExpr.getRight()!=null){
            if(sqlBinaryOpExpr.getRight() instanceof  SQLBinaryOpExpr){
                checkBinaryOpExpr((SQLBinaryOpExpr) sqlBinaryOpExpr.getRight());
            }else if(sqlBinaryOpExpr.getRight() instanceof SQLCastExpr){
                checkCaseExpr((SQLCastExpr) sqlBinaryOpExpr.getRight());
            }
        }
    }

    private void checkCaseExpr(SQLCastExpr sqlCastExpr){
        if(sqlCastExpr.getExpr() instanceof SQLQueryExpr){
            String newFieldSql = doSelectSql(sqlCastExpr.getExpr());
            SQLExpr subSelect = SQLUtils.toMySqlExpr(newFieldSql);
            sqlCastExpr.setExpr(subSelect);
        }
    }
}
